# This is the configuration file for JMeter Test Plan elements. It provides
# default values for those elements which shall be generated by the Test Plan
# Generator; the values comply with those of manually created elements in the
# JMeter tool.
#
# The configuration is separated into several sections, indicated through
# '#'-sequences; each section contains the properties of a certain Test Plan
# element. The section headers contain the JMeter API name of the related
# element, partially followed by a (bracketed) alternative name which is used
# in the JMeter application.
#
# In general, each Test Plan element has at least a name, an optional comment
# and an 'enabled' flag which determines whether the element shall be activated
# (in a Test Plan) or not.
#
# Information about the Test Plan elements has been mainly retrieved from the
# JMeter performance testing tool itself and from the Component Reference of
# the Apache JMeter User's Manual; additional information might be even
# retrieved from there:
#
#    http://jmeter.apache.org/usermanual/component_reference.html


################################################################################
#########################=-  properties of Test Plan  -=########################
################################################################################

# name of Test Plan;
testPlan_name = Test Plan

# additional information about a Test Plan;
testPlan_comment =

# true if and only if a Test Plan elements shall be enabled;
testPlan_enabled = true

# file which contains the default parameters of a Test Plan; each parameter
# must be defined as a name/value pair per line, separated by tabulator(s);
# if no default parameters shall be defined, this property might be left empty;
testPlan_parametersFile = configuration/csv/TestPlan_Parameters.csv

# true if and only if Thread Groups shall be run consecutively;
testPlan_serialized = false

# true if and only if TearDown Thread Groups shall be run after shutdown of
# main threads;
testPlan_tearDownOnShutDown = false

# true if and only if the functional mode shall be enabled;
# should be left false for not adversely affecting the performance;
testPlan_functionalMode = false

# file which contains the default directories or JARs to be added to the
# class path; each entry must be defined in an own line; if no default
# directories or JARs shall be defined, this property might be left empty;
testPlan_classPathFilesFile = configuration/csv/TestPlan_ClassPathFiles.csv


################################################################################
############=-  properties of Arguments (User Defined Variables)  -=############
################################################################################

# name of User Defined Variables;
arguments_name = User Defined Variables

# additional information about User Defined Variables;
arguments_comment =

# true if and only if User Defined Variables shall be enabled;
arguments_enabled = true

# file which contains the default parameters of a Test Plan; each parameter
# must be defined as a name/value/description triple per line, separated by
# tabulator(s); if no default parameters shall be defined, this property might
# be left empty;
arguments_parametersFile = configuration/csv/Arguments_Parameters.csv


################################################################################
#############=-  properties of Setup Thread Group (Thread Group)  -=############
################################################################################

# name of a Thread Group;
setupThreadGroup_name = Thread Group

# additional information about a Thread Group;
setupThreadGroup_comment =

# true if and only if Thread Group elements shall be enabled;
setupThreadGroup_enabled = true

# ramp-up period in seconds;
setupThreadGroup_rampUp = 1

# number of Threads/users;
setupThreadGroup_numThreads = 1

# action to be taken after a Sampler error occurs; this must be one of the
# "ON_SAMPLE_ERROR_..." String constants which are defined in class
# org.apache.jmeter.threads.AbstractThreadGroup:
# continue | startnextloop | stoptest | stoptestnow | stopthread
setupThreadGroup_onSampleError = continue

# true if and only if the Scheduler of the Thread Group shall be used; 
setupThreadGroup_scheduler = false

# Scheduler configuration property (start time);
setupThreadGroup_scheduler_startTime = 0

# Scheduler configuration property (end time);
setupThreadGroup_scheduler_endTime = 0

# Scheduler configuration property (duration in seconds);
setupThreadGroup_scheduler_duration = 0

# Scheduler configuration property (delay in seconds);
setupThreadGroup_scheduler_delay = 0

# name of the embedded Loop Controller;
setupThreadGroup_loopController_name = Loop Controller

# additional information about the embedded Loop Controller;
setupThreadGroup_loopController_comment =

# true if and only if the embedded Loop Controller shall be enabled;
# always false by default (probably ignored by JMeter);
setupThreadGroup_loopController_enabled = false

# Loop Controller configuration property (number of loops); for disabling the
# Loop Controller, set the property setupThreadGroup_loopController_loops to -1;
setupThreadGroup_loopController_loops = 1

# Loop Controller configuration property (loop shall return any samples if it
# is rerun); NOTE: this flag is obviously ignored by JMeter;
setupThreadGroup_loopController_forever = false


################################################################################
#######################=-  properties of If Controller  -=######################
################################################################################

# name of a If Controller;
ifController_name = If Controller

# additional information about a If Controller;
ifController_comment =

# true if and only if a If Controller elements shall be enabled;
ifController_enabled = true

# condition to be evaluated (default JavaScript);
ifController_condition =

# true if and only if the condition shall be interpreted as variable expression;
ifController_useExpression = false

# true if and only if the evaluation shall be applied to all children;
ifController_evaluateAll = false


################################################################################
######################=-  properties of Loop Controller  -=#####################
################################################################################

# name of a Loop Controller;
loopController_name = Loop Controller

# additional information about a Loop Controller;
loopController_comment =

# true if and only if a Loop Controller elements shall be enabled;
loopController_enabled = true

# loop count;
loopController_loops = 1

# true if and only if the Loop Controller shall return any samples if it is
# rerun; NOTE: this flag is obviously ignored by JMeter;
loopController_forever = false


################################################################################
#####################=-  properties of While Controller  -=#####################
################################################################################

# name of a While Controller;
whileController_name = While Controller

# additional information about a While Controller;
whileController_comment =

# true if and only if While Controller elements shall be enabled;
whileController_enabled = true

# condition to be met for executing the While controller's child elements;
whileController_condition =


################################################################################
###################=-  properties of Gaussian Random Timer  -=##################
################################################################################

# name of a Gaussian Random Timer;
gaussianRandomTimer_name = Gaussian Random Timer

# additional information about a Gaussian Random Timer;
gaussianRandomTimer_comment =

# true if and only if Gaussian Random Timer elements shall be enabled;
gaussianRandomTimer_enabled = true

# constant delay offset in milliseconds;
gaussianRandomTimer_delay = 300.0

# deviation in milliseconds (type double);
gaussianRandomTimer_range = 100.0


################################################################################
###########=-  properties of Cookie Manager (HTTP Cookie Manager)  -=###########
################################################################################

# name of a Cookie Manager;
cookieManager_name = HTTP Cookie Manager

# additional information about a Cookie Manager;
cookieManager_comment = generated

# true if and only if Cookie Manager elements shall be enabled;
cookieManager_enabled = true

# true if and only if cookies shall be cleared in each iteration;
cookieManager_clearEachIteration = false

# this must be one of the following values, with "compatibility" being used by
# default:
# default | compatibility | rfc2109 | rfc2965 | ignorecookies | netscape
cookieManager_cookiePolicy = compatibility

# cookie implementation; this must be one of the following values, with
# "HC3CookieHandler" being used by default:
# HC3CookieHandler | HC4CookieHandler
cookieManager_implementation = HC3CookieHandler


################################################################################
####################=-  properties of Response Assertion  -=####################
################################################################################

# name of a Response Assertion;
responseAssertion_name = Response Assertion

# additional information about a Response Assertion;
responseAssertion_comment =

# true if and only if Response Assertion elements shall be enabled;
responseAssertion_enabled = true

# true if and only if the status of applied assertion shall be ignored;
responseAssertion_assumeSuccess = false

# scope on which the assertion shall be applied to; this must be one of the
# following values, with "scopeParent" being used by default:
# scopeAll | scopeChildren | scopeParent
responseAssertion_scope = scopeParent

# scope JMeter variable; if this variable is defined, any other scope-related
# settings will be ignored;
responseAssertion_scopeVariableName =

# response-field to be tested; this must be one of the following values, with
# "responseData" being used by default:
# responseCode | responseData | responseDataAsDocument | responseHeaders |
# responseMessage | URL
responseAssertion_testField = responseData

# pattern matching type of assertion; this must be one of the following values,
# with "containsType" being used by default:
# equalsType | matchType | notType | substringType | containsType
responseAssertion_type = containsType


################################################################################
##########################=-  properties of Counter  -=#########################
################################################################################

# name of a Counter Config;
counterConfig_name = Counter

# additional information about a Counter Config;
counterConfig_comment =

# true if and only if Counter Config elements shall be enabled;
counterConfig_enabled = true

# counter start value (of type long);
counterConfig_start = 0

# counter increment value (of type long);
counterConfig_increment = 0

# counter end value (of type long);
counterConfig_end = 0

# optional counter format; defined as DecimalFormat,
# e.g. 000 for 001, 002, 003, ...;
counterConfig_format =

# name of the counter value, for being referenced by other elements via
# syntax ${counterConfig_referenceName};
counterConfig_referenceName =

# true if and only if the counter shall be tracked independently for each user;
counterConfig_isPerUser = false

# true if and only if the counter shall be reset on each Thread Group iteration;
# this flag is ignored, if flag "counterConfig_isPerUser" is set to false;
counterConfig_resetOnThreadGroupIteration = false


################################################################################
###############=-  properties of Regular Expression Extractor  -=###############
################################################################################

# name of a Regular Expression Extractor;
regularExpressionExtractor_name = Regular Expression Extractor

# additional information about a Regular Expression Extractor;
regularExpressionExtractor_comment =

# true if and only if Regular Expression Extractor elements shall be enabled;
regularExpressionExtractor_enabled = true

# scope on which the extractor shall be applied to; this must be one of the
# following values, with "scopeParent" being used by default:
# scopeAll | scopeChildren | scopeParent
regularExpressionExtractor_scope = scopeParent

# scope JMeter-variable; if this variable is defined, any other scope settings
# will be ignored;
regularExpressionExtractor_scopeVariableName =

# response-field to be tested; this must be one of the following values, with
# "responseData" being used by default:
# responseCode | responseDataUnescaped | responseData | responseDataAsDocument |
# responseHeaders | responseMessage | URL
regularExpressionExtractor_testField = responseData

# name of the result variable, for being referenced by other elements via
# syntax ${regularExpressionExtractor_referenceName};
regularExpressionExtractor_referenceName =

# regular expression to be used for parsing the response data;
regularExpressionExtractor_regularExpression =

# template to be used for creating a string from the found matches;
regularExpressionExtractor_template =

# number of match to be used for the result;
regularExpressionExtractor_matchNumber = 0

# default value of the referenced variable, in case the regular expression does
# not match (for debugging purposes in particular, undefined by default); 
regularExpressionExtractor_defaultValue =


################################################################################
###########=-  properties of Header Manager (HTTP Header Manager)  -=###########
################################################################################

# name of a HTTP Header Manager;
headerManager_name = HTTP Header Manager

# additional information about a HTTP Header Manager;
headerManager_comment =

# true if and only if HTTP Header Manager elements shall be enabled;
headerManager_enabled = true

# file which contains the default header information of a HTTP Header Manager;
# each parameter must be defined as a name/value pair per line, separated by
# tabulator(s); if no default header information shall be defined, this property
# might be left empty;
headerManager_headersFile = configuration/csv/HeaderManager_Headers.csv


################################################################################
###############=-  properties of JUnit Sampler (JUnit Request)  -=##############
################################################################################

# name of a JUnit Request;
jUnitSampler_name = JUnit Request

# additional information about a JUnit Request;
jUnitSampler_comment =

# true if and only if JUnit Request elements shall be enabled;
jUnitSampler_enabled = true

# true if and only if JUnit 4 (instead of JUnit 3) annotations shall be
# searched;
jUnitSampler_junit4 = false

# package filter;
jUnitSampler_filterString =

# class name;
jUnitSampler_className =

# constructor String;
jUnitSampler_constructorString =

# test method;
jUnitSampler_testMethod =

# success message;
jUnitSampler_successMessage = Test successful

# success code;
jUnitSampler_successCode = 1000

# failure message;
jUnitSampler_failureMessage = Test failed

# failure code;
jUnitSampler_failureCode = 0001

# error message;
jUnitSampler_errorMessage = An unexpected error occured

# error code;
jUnitSampler_errorCode = 9999

# true if and only if setUp and tearDown shall not be called;
jUnitSampler_doNotSetUpTearDown = false

# true if and only if assertion errors shall be appended;
jUnitSampler_appendError = false

# true if and only if runtime exceptions shall be appended;
jUnitSampler_appendException = false

# true if and only if a new instance per sample shall be created;
jUnitSampler_createNewInstancePerSample = false


################################################################################
#####################=-  properties of BeanShell Sampler  -=####################
################################################################################

# name of a BeanShell Sampler;
beanShellSampler_name = BeanShell Sampler

# additional information about a BeanShell Sampler;
beanShellSampler_comment =

# true if and only if BeanShell Sampler elements shall be enabled;
beanShellSampler_enabled = true

# true if and only if the BeanShell interpreter shall be reset before each call;
beanShellSampler_resetInterpreter = false

# parameters String;
beanShellSampler_parametersString =

# script file to be optionally loaded;
beanShellSampler_scriptFile =

# script to be interpreted;
beanShellSampler_script =


################################################################################
################=-  properties of Java Sampler (Java Request)  -=###############
################################################################################

# name of a Java Request;
javaSampler_name = Java Request

# additional information about a Java Request;
javaSampler_comment =

# true if and only if Java Request elements shall be enabled;
javaSampler_enabled = true

# full name of the Sampler class which shall be selected by default; if defined,
# it must be one of the Samplers which are detectable for JMeter, that is names
# of classes located as jars in the lib/ext folder of the installation
# directory; otherwise the default Sampler will be selected, if available; the
# following two default Samplers are provided by JMeter for testing purposes:
#
#   - org.apache.jmeter.protocol.java.test.JavaTest (default)
#   - org.apache.jmeter.protocol.java.test.SleepTest
#
javaSampler_classname =

# file which contains the default parameters of a Java Request; each parameter
# must be defined as a name/value pair per line, separated by tabulator(s); if
# no default parameters shall be defined, this property might be left empty;
#
javaSampler_argumentsFile = configuration/csv/JavaSampler_Parameters.csv


################################################################################
############=-  properties of SOAP Sampler (SOAP/XML-RCP Request)  -=###########
################################################################################

# name of a SOAP/XML-RCP Request;
soapSampler_name = SOAP/XML-RCP Request

# additional information about a SOAP/XML-RCP Request;
soapSampler_comment =

# true if and only if SOAP/XML-RCP Request elements shall be enabled;
soapSampler_enabled = true

# target URL;
soapSampler_url =

# true if and only if a SOAP action shall be sent;
soapSampler_sendSoapAction = true

# an optional SOAP action to be sent;
soapSampler_soapAction =

# true if and only if "Connection: keep-alive" shall be sent;
# otherwise "Connection: close" will be sent;
soapSampler_useKeepAlive = false

# SOAP/XML RPC data;
soapSampler_xmlData =


################################################################################
#############=-  properties of HTTP Sampler Proxy (HTTP Request)  -=############
################################################################################

# name of a HTTP Request;
httpSamplerProxy_name = HTTP Request

# additional information about a HTTP Request;
httpSamplerProxy_comment =

# true if and only if HTTP Request elements shall be enabled;
httpSamplerProxy_enabled = true

# server name or IP address;
httpSamplerProxy_domain =

# port number (integer value);
httpSamplerProxy_port = 0

# connect timeout in milliseconds;
httpSamplerProxy_connectTimeout =

# response timeout in milliseconds;
httpSamplerProxy_responseTimeout =

# HTTP request-implementation (optionally,  undefined by default); this might
# be one of the following values:
# HttpClient4 | HttpClient3.1 | Java
httpSamplerProxy_implementation =

# HTTP request-protocol;
httpSamplerProxy_protocol =

# HTTP request-method; this must be one of the following values, with "GET"
# being used by default:
# GET | POST | HEAD | PUT | OPTIONS | TRACE | DELETE | PATCH
httpSamplerProxy_method = GET

# content encoding to be used for HTTP request;
httpSamplerProxy_contentEncoding =

# path to the resource which is to be requested;
httpSamplerProxy_path =

# flags for redirects, to be used alternatively (both must not be set true);
httpSamplerProxy_autoRedirects = false
httpSamplerProxy_followRedirects = true

# true if and only if "Connection: keep-alive" shall be sent; otherwise
# "Connection: close" will be sent;
httpSamplerProxy_useKeepAlive = true

# true if and only if multipart/form-data for POST shall be used;
httpSamplerProxy_doMultipartPost = false

# true if and only if browser-compatible headers shall be used;
httpSamplerProxy_doBrowserCompatibleMultipart = false

# file which contains the arguments to be sent with a request optionally;
# if no arguments shall be sent, this property might be left empty;
httpSamplerProxy_argumentsFile = configuration/csv/HTTPSamplerProxy_Parameters.csv

# file which contains the files to be sent with a request optionally;
# if no files shall be sent, this property might be left empty;
httpSamplerProxy_httpFilesFile = configuration/csv/HTTPSamplerProxy_Files.csv

# proxy server properties (name or IP, port, user name, password);
httpSamplerProxy_proxyHost =
httpSamplerProxy_proxyPort =
httpSamplerProxy_proxyUser =
httpSamplerProxy_proxyPassword =

# true if and only if all embedded resources shall be retrieved;
httpSamplerProxy_parseImages = false

# regular expression which must be matched by any resource-URL for its resource
# being parsed; this flag is irrelevant, if "httpSamplerProxy_parseImages" is
# set to false;
httpSamplerProxy_embeddedUrlRegularExpression =

# true if and only if concurrent pool size shall be used;
httpSamplerProxy_useConcurrentPoolSize = false

# integer value which defines the concurrent pool size; this value is
# irrelevant, in case "httpSamplerProxy_parseImages" is set to false;
httpSamplerProxy_concurrentPoolSize = 4

# source type; this must be a value between 0 and 3, interpreted as follows:
#
# 0 -- IP/Hostname (default)
# 1 -- Device
# 2 -- Device IPv4
# 3 -- Device IPv6
#
httpSamplerProxy_ipSourceType = 0

# source address as string;
httpSamplerProxy_ipSource =

# true if and only if a Monitor Results Listener shall be used (optional task);
httpSamplerProxy_useAsMonitor = false

# true if and only if response shall be saved as MD5 hash (optional task);
httpSamplerProxy_saveResponseAsMD5Hash = false

# encode http requests
httpSamplerProxy_encode = false

################################################################################
########=-  properties of Config Test Element (HTTP Request Defaults)  -=#######
################################################################################

# name of HTTP Request Defaults;
configTestElement_name = HTTP Request Defaults

# additional information about HTTP Request Defaults;
configTestElement_comment =

# true if and only if HTTP Request Defaults shall be enabled;
configTestElement_enabled = true

# server name or IP address;
configTestElement_domain =

# port number (integer value);
configTestElement_port = 0

# connect timeout in milliseconds;
configTestElement_connectTimeout =

# response timeout in milliseconds;
configTestElement_responseTimeout =

# HTTP request-implementation (optionally,  undefined by default); this might
# be one of the following values:
# HttpClient4 | HttpClient3.1 | Java
configTestElement_implementation =

# HTTP request-protocol;
configTestElement_protocol =

# content encoding to be used for HTTP requests;
configTestElement_contentEncoding =

# path to the resource which is to be requested;
configTestElement_path =

# file which contains the arguments to be sent with a request optionally;
# if no arguments shall be sent, this property might be left empty;
configTestElement_argumentsFile = configuration/csv/HTTPRequestDefaults_Parameters.csv

# proxy server properties (name or IP, port, user name, password);
configTestElement_proxyHost =
configTestElement_proxyPort =
configTestElement_proxyUser =
configTestElement_proxyPassword =

# true if and only if all embedded resources shall be retrieved;
configTestElement_parseImages = false

# regular expression which must be matched by any resource-URL for its resource
# being parsed; this flag is irrelevant, if "httpSamplerProxy_parseImages" is
# set to false;
configTestElement_embeddedUrlRegularExpression =

# true if and only if concurrent pool size shall be used;
configTestElement_useConcurrentPoolSize = false

# integer value which defines the concurrent pool size; this value is
# irrelevant, in case "httpSamplerProxy_parseImages" is set to false;
configTestElement_concurrentPoolSize = 4


################################################################################
#######=-  properties of Markov Controller (Markov Session Controller)  -=######
################################################################################

# name of a Markov Session Controller;
markovController_name = Markov Session Controller

# additional information about a Markov Session Controller;
markovController_comment =

# true if and only if Markov Session Controller elements shall be enabled;
markovController_enabled = true

# file which contains the default behavior mix entries; if no entries shall be
# set by default, this property might be left empty;
markovController_behaviorMixFile = configuration/csv/MarkovController_BehaviorMix.csv

# true if and only if the embedded Arrival Controller shall be enabled;
markovController_sessionArrivalController_enabled = false

# maximum number of sessions, defined as a formula;
markovController_sessionArrivalController_maximumSessionNumber =

# true if and only if logging for the Arrival Controller shall be enabled;
markovController_sessionArrivalController_loggingEnabled = false

# log-file to be used by the Arrival Controller, in case logging is enabled;
markovController_sessionArrivalController_logFile =


################################################################################
#############=-  properties of Application State (Markov State)  -=#############
################################################################################

# name of a Markov State;
applicationState_name = Markov State

# additional information about a Markov State;
applicationState_comment =

# true if and only if Markov State elements shall be enabled;
applicationState_enabled = true


################################################################################
##########=-  properties of Result Collector (Response Time Graph)  -=##########
################################################################################

# name of a Response Time Graph;
responseTimeGraph_name = Response Time Graph

# additional information about a Response Time Graph;
responseTimeGraph_comment =

# true if and only if Response Time Graph elements shall be enabled;
responseTimeGraph_enabled = true

# NOTE: setting further properties is not provided here, since each Result
# Collector is completely configured by default and does not provide any
# additional functionality for the measurement process itself; hence, it does
# not need to be configured explicitly;


################################################################################
###########=-  properties of Result Collector (View Results Tree)  -=###########
################################################################################

# name of a View Results Tree;
viewResultsTree_name = View Results Tree

# additional information about a View Results Tree;
viewResultsTree_comment =

# true if and only if View Results Tree elements shall be enabled;
viewResultsTree_enabled = true

# NOTE: setting further properties is not provided here, since each Result
# Collector is completely configured by default and does not provide any
# additional functionality for the measurement process itself; hence, it does
# not need to be configured explicitly;
